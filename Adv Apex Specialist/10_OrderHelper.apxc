public without sharing class OrderHelper {

    /**
     * @name AfterUpdate
     * @description 
     * @param List<Order> newList
     * @param List<Order> oldList
     * @return void
    **/
    public static void AfterUpdate(List<Order> newList, List<Order> oldList){
        Set<Id> orderIds = new Set<Id>();
        List<Product2> listProducts = new List<Product2>();
        Product2 p;
        
        for ( Integer i=0; i<newList.size(); i++ ){
            if ( newList[i].Status == Constants.ACTIVATED_ORDER_STATUS){
                orderIds.add(newList[i].Id);
            }//end of if
        }//end of for
        
		RollUpOrderItems(orderIds);
        
    }//end of AfterUpdate

    /**
     * @name RollUpOrderItems
     * @description Given a set of Activated Order ids, query the child Order Items and related Products to calculate Inventory levels
     * @param Set<Id> activatedOrderIds
     * @return void
    **/
    public static void RollUpOrderItems(Set<Id> activatedOrderIds){
        Double nTotalQuantity = 0;
        //ToDo: Declare a Map named "productMap" of Ids to Product2 records
        Map<Id, Product2> productMap = new Map<Id, Product2>();
		list<OrderItem> lstOrderItems = [select id, product2id, Quantity from OrderItem where OrderId in :activatedOrderIds];
        //ToDo: Loop through a query of OrderItems related to the activatedOrderIds
        for (OrderItem oi: lstOrderItems){
            //ToDo: Populate the map with the Id of the related Product2 as the key and Product2 record as the value
            productMap.put(oi.Product2Id, new Product2());
        }
            
        Set<Id> setProductIds= productMap.keySet();
        productMap = new Map<Id, Product2>([select Id, Name, Quantity_Ordered__c  from Product2 where id in :setProductIds]);
        
        //ToDo: Loop through a query that aggregates the OrderItems related to the Products in the ProductMap keyset

        for(String prdId : productMap.keySet()){
        
             AggregateResult[] groupedResults  = [SELECT Product2Id, SUM(Quantity) total FROM OrderItem
                                                  WHERE Product2Id=:prdId GROUP BY Product2Id]; 
             for (AggregateResult ar : groupedResults)  {
                 productMap.get(prdId).Quantity_Ordered__c =  Integer.valueOf(ar.get('total'));
             }
         }
        
         //ToDo: Perform an update on the records in the productMap       
         if(productMap!=null && productMap.size()>0){
             update productMap.values();
        
        }

    }//RollUpOrderItems

}